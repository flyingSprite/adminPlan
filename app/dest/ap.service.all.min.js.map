{"version":3,"sources":["ap.service.all.min.js"],"names":["require","define","adminApp","config","marked","service","$http","this","method","url","info","args","console","log","warn","err","directive","restrict","replace","scope","markurl","markData","template","controller","$scope","$sce","setOptions","highlight","code","hljs","highlightAuto","value","undefined","markdownHtml","trustAsHtml","$watch","get","success","data","factory","defaults","useXDomain","serverUrl","serverHost","toUpperCase","headers","Content-Type","transformRequest","$","param","logging","send","self","supportNotification","window","Notification","permission","requestPermission","notice","message"],"mappings":"AAOAA,SACE,cACA,yBAGFC,OAAO,eAAgB,WAAY,SAAU,SAAU,UAAW,qBAAsB,SAAUC,EAAUC,EAAQC,GAElHF,EAASG,QAAQ,cAAe,SAAUC,GACxCC,KAAKJ,OAAS,WACZ,MAAOG,IAAOE,OAAQ,MAAOC,IAAK,oBAGrCJ,QAAQ,UAAW,WAClBE,KAAKG,KAAO,SAASC,GACnBC,QAAQC,IAAIF,IAGdJ,KAAKO,KAAO,SAASH,GACnBC,QAAQE,KAAKH,IAGfJ,KAAKQ,IAAM,SAASJ,GAClBC,QAAQG,IAAIJ,MAGfK,UAAU,QAAS,WAClB,OACEC,SAAU,IACVC,SAAS,EACTC,OACEC,QAAS,IACTC,SAAU,KAEZC,SAAU,0CACVC,WAAY,SAAUC,EAAQC,EAAMnB,GAClCF,EAAOsB,YACLC,UAAW,SAAUC,GACnB,MAAOC,MAAKC,cAAcF,GAAMG,SAGbC,QAAnBR,EAAOH,WACTG,EAAOS,aAAeR,EAAKS,YAAY9B,EAAOoB,EAAOH,WACrDG,EAAOW,OAAO,WACZ,MAAOX,GAAOH,UACb,WACDG,EAAOS,aAAeR,EAAKS,YAAY9B,EAAOoB,EAAOH,cAInCW,QAAnBR,EAAOH,UAA2CW,QAAlBR,EAAOJ,SACxCd,EAAM8B,IAAIZ,EAAOJ,SACdiB,QAAQ,SAASC,GAChBd,EAAOS,aAAeR,EAAKS,YAAY9B,EAAOkC,UAMzDC,QAAQ,aAAc,QAAS,SAAUjC,GACxCA,EAAMkC,SAASC,YAAa,EAC5B7B,QAAQC,IAAIV,EACZ,IAAIuC,GAAY,UAAYvC,EAAOwC,WAAa,YAEhD,OAAO,UAAUxC,GACf,MAAkC,QAA/BA,EAAOK,OAAOoC,eAA0D,OAA/BzC,EAAOK,OAAOoC,cACjDtC,GACLG,IAAKiC,EAAYvC,EAAOM,IACxBD,OAAQL,EAAOK,OAAOoC,cACtBC,SACEC,eAAgB,qCAElBC,iBAAmB,SAAST,GAC1B,MAAaN,UAATM,EACKA,EAEFU,EAAEC,MAAMX,IAEjBA,KAAMnC,EAAOmC,OAEyB,OAA/BnC,EAAOK,OAAOoC,cAChBtC,GACLG,IAAKiC,EAAYvC,EAAOM,IACxBD,OAAQ,MACR8B,KAAMnC,EAAOmC,OAJV,WASVjC,QAAQ,UAAY,QAAS,UAAW,SAAUC,EAAO4C,GACxDtC,QAAQC,IAAIqC,GACZ5C,EAAMkC,SAASC,YAAa,EA4B5BlC,KAAK4C,KAAO,SAAUb,GACpB1B,QAAQC,IAAIyB,SAalBrC,OAAO,wBAAyB,YAAa,SAAUC,GACrDA,EAASG,QAAQ,eAAgB,WAC/B,GAAI+C,GAAO7C,IACX6C,GAAKC,qBAAsB,EACrB,gBAAkBC,QAIa,YAA5BC,aAAaC,WACpBJ,EAAKC,qBAAsB,EAGQ,WAA5BE,aAAaC,YACpBD,aAAaE,kBAAkB,SAAUD,GAEpB,YAAfA,IACFJ,EAAKC,qBAAsB,KAX/BD,EAAKC,qBAAsB,EAgB7BD,EAAKM,OAAS,SAASC,GACjBP,EAAKC,qBACP,GAAIE,cAAaI","file":"ap.service.all.min.js","sourcesContent":["\r\n/**\r\n * Define a server use low wrap:\r\n * define('serviceName', ['a', 'b', 'c'], function () {});\r\n * then add like below:\r\n * require(['serviceName']);\r\n */\r\nrequire([\r\n  'initService',\r\n  'notification-service'\r\n]);\r\n\ndefine('initService', ['adminApp', 'config', 'marked', 'angular', 'angular-ui-router'], function (adminApp, config, marked) {\r\n\r\n  adminApp.service('InitService', function ($http){\r\n    this.config = function () {\r\n      return $http({method: 'GET', url: '/config.json'});\r\n    };\r\n  })\r\n  .service('logging', function(){\r\n    this.info = function(args) {\r\n      console.log(args);\r\n    };\r\n\r\n    this.warn = function(args) {\r\n      console.warn(args);\r\n    };\r\n\r\n    this.err = function(args) {\r\n      console.err(args);\r\n    };\r\n  })\r\n  .directive('markd', function () {\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        markurl: '@',\r\n        markData: '@'\r\n      },\r\n      template: '<div ng-bind-html=\"markdownHtml\"></div>',\r\n      controller: function ($scope, $sce, $http) {\r\n        marked.setOptions({\r\n          highlight: function (code) {\r\n            return hljs.highlightAuto(code).value;\r\n          }\r\n        });\r\n        if ($scope.markData != undefined) {\r\n          $scope.markdownHtml = $sce.trustAsHtml(marked($scope.markData));\r\n          $scope.$watch(function () {\r\n            return $scope.markData;\r\n          }, function () {\r\n            $scope.markdownHtml = $sce.trustAsHtml(marked($scope.markData));\r\n          });\r\n        }\r\n\r\n        if($scope.markData == undefined || $scope.markurl != undefined){\r\n          $http.get($scope.markurl)\r\n            .success(function(data) {\r\n              $scope.markdownHtml = $sce.trustAsHtml(marked(data));\r\n            });\r\n        }\r\n      }\r\n    };\r\n  })\r\n  .factory('adminHttp', ['$http', function ($http){\r\n    $http.defaults.useXDomain = true;\r\n    console.log(config);\r\n    var serverUrl = 'http://' + config.serverHost + '/solutions';\r\n    // var serverUrl = 'http://www.duastone.com/solutions';\r\n    return function (config){\r\n      if(config.method.toUpperCase() == 'POST' || config.method.toUpperCase() == 'PUT') {\r\n        return $http({\r\n          url: serverUrl + config.url,\r\n          method: config.method.toUpperCase(),\r\n          headers: {\r\n            'Content-Type': 'application/x-www-form-urlencoded'\r\n          },\r\n          transformRequest : function(data){\r\n            if (data === undefined) {\r\n              return data;\r\n            }\r\n            return $.param(data);\r\n          },\r\n          data: config.data\r\n        });\r\n      } else if (config.method.toUpperCase() == 'GET') {\r\n        return $http({\r\n          url: serverUrl + config.url,\r\n          method: 'GET',\r\n          data: config.data\r\n        });\r\n      }\r\n    };\r\n  }])\r\n  .service('socket', [ '$http', 'logging', function ($http, logging) {\r\n    console.log(logging);\r\n    $http.defaults.useXDomain = true;\r\n    // var socket = new WebSocket('ws://localhost:8080/solutions/point');\r\n    // var self = this;\r\n    // var temporyList = [];\r\n    // socket.onopen = function (){\r\n\r\n    //   self.connectSuccess = true;\r\n    //   angular.forEach(temporyList, function(value){\r\n    //     socket.send(value);\r\n    //   });\r\n    //   temporyList.length = 0;\r\n    // }\r\n\r\n    // socket.onmessage = function(event){\r\n    //   logging.info(event.data);\r\n    // }\r\n\r\n    // $http({\r\n    //     url: 'http://localhost:8080/solutions/record',\r\n    //     method: 'GET'\r\n    //   }).then(function (data){\r\n    //     console.log(\"====>\", data);\r\n    //   }).then(function (err){\r\n    //     console.log(err);\r\n    //   });\r\n\r\n\r\n\r\n    this.send = function (data) {\r\n      console.log(data);\r\n      // if(self.connectSuccess){\r\n      //   socket.send(data);\r\n      // } else {\r\n      //   temporyList.push(data);\r\n      //   logging.warn(\"Web Socket is connecting ... \");\r\n      // }\r\n    };\r\n\r\n  }]);\r\n\r\n});\r\n\ndefine('notification-service', ['adminApp'], function (adminApp) {\r\n  adminApp.service('notification', function () {\r\n    var self = this;\r\n    self.supportNotification = false;\r\n    if (!('Notification' in window)) {\r\n      self.supportNotification = false;\r\n    }\r\n    // Let's check whether notification permissions have already been granted\r\n    else if (Notification.permission === 'granted') {\r\n      self.supportNotification = true;\r\n    }\r\n    // Otherwise, we need to ask the user for permission\r\n    else if (Notification.permission !== 'denied') {\r\n      Notification.requestPermission(function (permission) {\r\n        // If the user accepts, let's create a notification\r\n        if (permission === 'granted') {\r\n          self.supportNotification = true;\r\n        }\r\n      });\r\n    }\r\n\r\n    self.notice = function(message) {\r\n      if (self.supportNotification) {\r\n        new Notification(message);\r\n      }\r\n    };\r\n  });\r\n});"],"sourceRoot":"/source/"}